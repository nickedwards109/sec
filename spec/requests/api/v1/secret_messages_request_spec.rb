require 'rails_helper'

describe 'Secret messages API' do
  before(:each) do
    # Create a secret message instance to use in the specs, and override the id
    #  generated by ActiveRecord so we know what the resource id is in the specs
    SecretMessage.create(message: "There's always money in the banana stand.", id: 1)
    SecretMessage.create(message: "I've made a huge mistake.", id: 2)

    # This overrides the key in application.yml which is ignored from
    #  version control
    ENV['key'] = 'ff5c66433974329a675b114f27799251821c6830f0aa69cbb62cfcce6c6cd20f864494873c0e513a2033f650f357ef2cc9818b6541bf5625d3a4ee374e254b1e'
  end

  it 'responds with a 404 to an unauthenticated request' do
    get '/api/v1/secret_messages/1.json'
    expect(response).to have_http_status(404)

    get '/api/v1/secret_messages/1.json', headers: { 'Authorization' => '' }
    expect(response).to have_http_status(404)

    invalid_signature = "1234abcd"
    get '/api/v1/secret_messages/1.json', headers: { 'Authorization' => invalid_signature }
    expect(response).to have_http_status(404)
  end

  it 'responds to an authenticated request for a single resource' do
    # When the test key is used with SHA-256 HMAC to hash the following
    #  string: 'GET http://localhost:3000/api/v1/secret_messages/1.json HTTP/1.1'
    #  the resulting hex string is the digital signature below.
    # This follows the authentication scheme described in README.md.
    # Eventually, when this app is pushed to production, the endpoint will be:
    #  http://secret-message-server.herokuapp.com/api/v1/secret_messages/1.json
    correct_signature = '90aa7d0c79677d86800500f6c999a6273544169f3912322c5e48174b58fb90dc'
    get '/api/v1/secret_messages/1.json', headers: { 'Authorization' => correct_signature }

    raw_message = JSON.parse(response.body)
    message = raw_message["messages"].first["message"]

    expect(response).to have_http_status(200)
    expect(raw_message.class).to equal(Hash)
    expect(raw_message["messages"].class).to equal(Array)
    expect(raw_message["messages"][0].class).to equal(Hash)
    expect(raw_message["messages"][0]["message"].class).to equal(String)
    expect(raw_message["messages"][0]["initialization_vector"].class).to equal(String)
    expect(raw_message["messages"][0]["signature"].class).to equal(String)
    expect(raw_message["messages"][0]["signature"]).to eql('b255de9b3d2342f43c97ec1ec94f9fc8744512a31f6ae85fbc80b33da5596952')
  end

 it 'responds to an authenticated request for all secret message resources' do
    # Similarly to the spec for requesting a single resource, this signature is
    #  a SHA-256 HMAC of the following request line:
    #  'GET http://localhost:3000/api/v1/secret_messages.json HTTP/1.1'
    correct_signature = '53654f7134d8d901e991b7ab2e6ec736c6690f9fe4b4c3d8fb3e5c698893f2ed'

    get '/api/v1/secret_messages.json', headers: { 'Authorization' => correct_signature }

    expect(response).to have_http_status(200)

    raw_messages = JSON.parse(response.body)
    expect(raw_messages.class).to equal(Hash)
    expect(raw_messages["messages"].class).to equal(Array)
    expect(raw_messages["messages"][0].class).to equal(Hash)
    expect(raw_messages["messages"][0]["message"].class).to equal(String)
    expect(raw_messages["messages"][0]["initialization_vector"].class).to equal(String)
    expect(raw_messages["messages"][0]["signature"].class).to equal(String)
    expect(raw_messages["messages"][0]["signature"]).to eql("b255de9b3d2342f43c97ec1ec94f9fc8744512a31f6ae85fbc80b33da5596952")

    expect(raw_messages["messages"][1].class).to equal(Hash)
    expect(raw_messages["messages"][1]["message"].class).to equal(String)
    expect(raw_messages["messages"][1]["initialization_vector"].class).to equal(String)
    expect(raw_messages["messages"][1]["signature"].class).to equal(String)
    expect(raw_messages["messages"][1]["signature"]).to eql("5ee297e4900e7f0e4102e7b6b6b9b00e0e48fd37336e8fcc7f7aa3b41c444033")
  end

  it 'encrypts the response body with AES-256-CBC and sends the initialization vector' do
    ENV['key'] = 'ff5c66433974329a675b114f27799251821c6830f0aa69cbb62cfcce6c6cd20f864494873c0e513a2033f650f357ef2cc9818b6541bf5625d3a4ee374e254b1e'
    ENV['initialization_vector'] = '35cd6e2b82b6537d'
    correct_signature = '90aa7d0c79677d86800500f6c999a6273544169f3912322c5e48174b58fb90dc'
    get '/api/v1/secret_messages/1.json', headers: { 'Authorization' => correct_signature }

    raw_response = JSON.parse(response.body)
    response_cipher = raw_response["messages"][0]["message"]
    response_initialization_vector = raw_response["messages"][0]["initialization_vector"]

    expected_response_cipher = "2d8c5aa513c04092ae3811f9a7dde8286e00badeb8310907c64da9c7289ed74734f4246a8c49f088ebea3d7d154604f5"
    expect(response_cipher).to eql(expected_response_cipher)
    expect(response_initialization_vector).to eql('35cd6e2b82b6537d')
  end
end
